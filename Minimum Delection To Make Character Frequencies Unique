

Example 1:

Input: s = "aab"
Output: 0
Explanation: s is already good.

Example 2:

Input: s = "aaabbbcc"
Output: 2
Explanation: You can delete two 'b's resulting in the good string "aaabcc".
Another way it to delete one 'b' and one 'c' resulting in the good string "aaabbc".

Example 3:

Input: s = "ceabaacb"
Output: 2
Explanation: You can delete both 'c's resulting in the good string "eabaab".
Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).


// code
import java.util.*;

class Solution {
    public int minDeletions(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        char ar[] = s.toCharArray();
        
        for (char c : ar) {
            if (Character.isLetter(c)) {
                c = Character.toLowerCase(c);
            }
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        
        int sum = 0;
        Set<Integer> uniqueCounts = new HashSet<>();
        
        for (int count : map.values()) {
            while (uniqueCounts.contains(count)) {
                count--;
                sum++;
            }
            if (count > 0) {
                uniqueCounts.add(count);
            }
        }
        
        return sum;
    }
}
